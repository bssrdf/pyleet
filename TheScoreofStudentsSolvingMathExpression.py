'''
You are given a string s that contains digits 0-9, addition symbols '+', and 
multiplication symbols '*' only, representing a valid math expression of single 
digit numbers (e.g., 3+5*2). This expression was given to n elementary school students. 
The students were instructed to get the answer of the expression by following this order of operations:

Compute multiplication, reading from left to right; Then,
Compute addition, reading from left to right.
You are given an integer array answers of length n, which are the submitted answers of the 
students in no particular order. You are asked to grade the answers, by following these rules:

If an answer equals the correct answer of the expression, this student will be rewarded 5 points;

Otherwise, if the answer could be interpreted as if the student applied the operators in 
the wrong order but had correct arithmetic, this student will be rewarded 2 points;

Otherwise, this student will be rewarded 0 points.

Return the sum of the points of the students.

 

Example 1:


Input: s = "7+3*1*2", answers = [20,13,42]
Output: 7
Explanation: As illustrated above, the correct answer of the expression is 13, therefore one student is rewarded 5 points: [20,13,42]
A student might have applied the operators in this wrong order: ((7+3)*1)*2 = 20. Therefore one student is rewarded 2 points: [20,13,42]
The points for the students are: [2,5,0]. The sum of the points is 2+5+0=7.
Example 2:

Input: s = "3+5*2", answers = [13,0,10,13,13,16,16]
Output: 19
Explanation: The correct answer of the expression is 13, therefore three students are rewarded 5 points each: [13,0,10,13,13,16,16]
A student might have applied the operators in this wrong order: ((3+5)*2 = 16. Therefore two students are rewarded 2 points: [13,0,10,13,13,16,16]
The points for the students are: [5,0,0,5,5,2,2]. The sum of the points is 5+0+0+5+5+2+2=19.
Example 3:

Input: s = "6+0*1", answers = [12,9,6,4,8,6]
Output: 10
Explanation: The correct answer of the expression is 6.
If a student had incorrectly done (6+0)*1, the answer would also be 6.
By the rules of grading, the students will still be rewarded 5 points (as they got the correct answer), not 2 points.
The points for the students are: [0,0,5,0,0,5]. The sum of the points is 10.
Example 4:

Input: s = "1+2*3+4", answers = [13,21,11,15]
Output: 11
Explanation: The correct answer of the expression is 11.
Every other student was rewarded 2 points because they could have applied the operators as follows:
- ((1+2)*3)+4 = 13
- (1+2)*(3+4) = 21
- 1+(2*(3+4)) = 15
The points for the students are: [2,2,5,2]. The sum of the points is 11.
 

Constraints:

3 <= s.length <= 31
s represents a valid expression that contains only digits 0-9, '+', and '*' only.
All the integer operands in the expression are in the inclusive range [0, 9].
1 <= The count of all operators ('+' and '*') in the math expression <= 15
Test data are generated such that the correct answer of the expression is in the range of [0, 1000].
n == answers.length
1 <= n <= 10^4
0 <= answers[i] <= 1000


'''

from typing import List

from functools import lru_cache
import collections

class Solution:
    def scoreOfStudents(self, s: str, answers: List[int]) -> int:
        def truth(s):
            stack = []  
            num = 0
            for c in s:
                if ord('0') <= ord(c) <= ord('9'):
                    num = int(c)
                    if stack and stack[-1] == '*':
                        stack.pop()
                        stack.append(stack.pop()*num)
                    else:
                        stack.append(num)
                elif c == '*':
                    stack.append('*')
           # print(stack)
            while stack and len(stack) > 1:
                num = stack.pop()
                if stack:
                    stack.append(num + stack.pop())
            return stack[0]
        def eval(exp):
           # print(exp)
            num = 0
            i = 0
            op = ''
            stack = []
            while i < len(exp):
                if exp[i] == '+' or exp[i] == '*':
                    op = exp[i]
                    i += 1
                    continue 
                while i < len(exp) and ord('0') <= ord(exp[i]) <= ord('9'):
                    num = 10*num+int(exp[i])
                    i += 1
                stack.append(num)
                num = 0
            while stack and len(stack) > 1:
                num = stack.pop()
                if stack:
                    stack.append((stack.pop()+num) if op == '+' else (stack.pop()*num))
            return stack[0]                  

        all_ans = set()
        def all_digit(s):
            plus, mul = 0, 0
            for c in s:
                if c == '+':
                    plus += 1
                if c == '*':
                    mul += 1
            if plus > 0 and mul > 0: return 2
            elif plus == 0 and mul == 0: return 0
            return 1

        @lru_cache(None)
        def memo(exp):
            #print(exp)
            e = all_digit(exp)
            if e == 0:
                all_ans.add(int(exp))
                return
            elif e == 1:
                all_ans.add(eval(exp))  
                return
            num = 0
            op = ''
            i, j, pre = 0, 0, -1
            while i < len(exp):
                if exp[i] == '+' or exp[i] == '*':
                    op = exp[i]
                    i += 1
                    continue 
                start = i
                while i < len(exp) and ord('0') <= ord(exp[i]) <= ord('9'):
                    num = 10*num+int(exp[i])
                    i += 1
                if pre != -1:
                    if op == '+':           
                  #      print(exp[:j], '##', str(pre+num), '##', exp[i:])             
                        memo(exp[:j]+str(pre+num)+exp[i:])
                    elif op == '*':
                  #      print(exp[:j], '##', str(pre+num), '##', exp[i:])             
                        memo(exp[:j]+str(pre*num)+exp[i:])
                    j = start
                pre = num
                num = 0
        memo(s)               
        #print(all_ans)
        t = truth(s)
        ans = 0
        for a in answers:
            if a == t: ans += 5
            elif a in all_ans: ans += 2            
        return ans
    
    def scoreOfStudents2(self, s: str, answers: List[int]) -> int:
        A = answers
        c = collections.Counter(A)
        n = len(s) // 2 + 1
        res = [[set() for _ in range(n)] for j in range(n)]
        for i in range(n):
            res[i][i].add(int(s[2 * i]))
        for dif in range(1, n):
            for start in range(n - dif):
                end = start + dif
                curset = set()
                for i in range(start * 2 + 1, end * 2, 2):
                    if s[i] == "+":
                        for a in res[start][i // 2]:
                            for b in res[i//2 + 1][end]:
                                if a + b <= 1000:
                                    curset.add(a + b)
                    else:
                        for a in res[start][i // 2]:
                            for b in res[i//2 + 1][end]:
                                if a * b <= 1000:
                                    curset.add(a * b)
                res[start][end] = curset
        ans = 0
        crt = eval(s)
        for i in res[0][-1]:
            if i in c:
                if i == crt:
                    ans += 5 * c[i]
                else:
                    ans += 2 * c[i]
        return ans

    def scoreOfStudents3(self, s, answers):

        @lru_cache(None)
        def dp(i, j):
            if i == j:
                return {int(s[i])}
            res = {}
            for m in range(i + 1, j, 2):
                for a in dp(i, m - 1):
                    for b in dp(m + 1, j):
                        cur = a * b if s[m] == '*' else a + b
                        if cur <= 1000:  # opt with 0 <= answers[i] <= 1000
                            res[cur] = 2
            return res

        res = {**dp(0, len(s) - 1), **{eval(s): 5}}
        return sum(res.get(a, 0) for a in answers)

if __name__ == "__main__":
    '''
    print(Solution().scoreOfStudents(s = "1+2*3+4", answers = [13,21,11,15]))
    print(Solution().scoreOfStudents(s = "7+3*1*2", answers =  [20,13,42]))
    print(Solution().scoreOfStudents(s = "3+5*2", answers = [13,0,10,13,13,16,16]))
    print(Solution().scoreOfStudents(s = "6+0*1", answers = [12,9,6,4,8,6]))
    '''
    s = "3+3*6+6+9*3+9*3+9*6+9*6+6"
    ans = [195,759,645,195,903,696,646,195,195,364,726,382,822,195,801,835,942,195,195,654,507,951,255,292,796,567,195,862,829,195,378,195,948,285,781,705,19,836,690,462,195,780,924,480,626,765,195,627,195,876,803,717,195,822,894,195,723,543,505,134,858,195,492,261,351,249,543,447,195,975,261,195,918,195,553,624,388,750,523,342,195,195,831,618,195,948,522,609,573,195,681,378,703,744,306,822,717,360,195,195,789,930,526,122,585,195,711,699,954,940,471,300,420,399,819,414,195,762,934,108,195,240,759,195,960,719,195,195,609,456,447,207,828,195,834,195,924,477,195,195,564,447,744,519,168,195,381,546,843,546,845,195,195,837,195,330,195,906,495,462,289,195,813,288,195,195,419,882,195,195,438,195,993,864,195,684,357,855,675,195,297,339,442,195,822,195,195,816,74,130,195,621,330,723,195,387,519,882,195,615,642,195,277,195,921,357,303,83,492,747,195,195,945,903,195,195,195,297,195,195,722,38,560,720,243,887,195,664,876,861,480,801,195,703,729,400,381,195,765,195,624,195,195,195,195,477,195,213,801,483,685,675,840,195,747,951,381,945,360,195,215,231,978,195,813,78,195,600,489,996,195,399,195,195,195,270,582,351,195,477,195,639,737,195,661,56,747,603,30,158,531,972,195,924,507,195,195,603,195,195,195,195,942,195,894,195,195,315,195,810,342,870,195,195,493,380,663,195,195,531,876,195,657,195,909,921,302,804,195,675,893,195,795,55,185,996,943,492,506,195,670,810,708,501,543,699,828,948,156,627,729,465,375,339,895,855,564,634,342,976,726,270,644,316,702,1000,975,195,954,816,612,633,735,948,195,353,195,195,837,918,357,195,195,195,579,903,501,195,784,723,195,795,315,444,106,279,642,195,963,723,471,195,244,291,195,957,757,669,672,195,689,169,951,792,504,438,693,828,966,195,195,744,195,277,202,710,291,492,347,763,966,898,681,549,489,981,195,750,422,759,435,837,633,106,195,195,645,870,657,195,195,195,630,960,195,966,987,876,903,14,195,195,195,160,323,384,555,195,360,819,664,195,813,195,38,534,987,672,195,819,480,534,663,381,615,720,195,446,195,195,195,195,684,525,195,600,432,195,195,285,585,968,540,549,708,672,956,294,766,195,501,822,796,217,420,195,933,801,909,448,348,478,501,465,387,195,195,195,834,861,411,243,901,633,471,195,21,630,642,261,750,585,966,975,858,504,195,240,195,297,195,531,195,423,741,879,850,195,465,195,912,666,870,393,276,561,195,330,80,77,195,518,783,570,195,195,816,510,720,492,885,258,957,906,816,237,612,876,195,886,432,531,702,195,912,195,987,222,822,684,195,195,287,990,984,897,195,195,507,438,584,867,549,970,195,195,195,278,195,684,195,195,888,708,195,195,195,504,945,669,195,735,195,195,759,987,648,987,816,195,276,264,519,195,2,195,392,195,195,834,603,744,414,972,762,699,243,195,822,990,195,783,195,207,260,780,384,195,849,195,666,795,471,603,195,459,195,195,870,609,195,195,279,699,279,459,586,747,648,195,195,795,357,573,195,662,540,573,726,771,987,210,119,879,587,342,309,963,469,981,546,747,531,384,198,195,195,897,900,666,735,195,195,669,139,838,349,492,344,195,351,240,837,195,32,195,195,86,621,195,435,954,297,723,513,384,195,618,796,195,747,181,637,429,263,465,480,387,195,987,681,723,969,933,195,271,816,435,600,195,195,285,414,195,195,611,922,609,195,195,770,195,459,351,654,393,388,195,195,195,195,195,669,783,831,195,195,279,839,195,240,195,522,753,97,618,855,975,561,558,525,456,195,195,666,666,275,999,195,507,801,309,738,969,435,666,426,195,471,795,912,881,981,374,510,347,195,546,609,669,846,447,381,195,540,504,9,195,297,294,813,820,361,999,285,428,195,910,654,360,195,195,195,348,195,546,705,432,608,777,811,729,195,195,735,195,411,432,672,771,699,645,195,621,231,294,195,669,744,733,793,339,510,37,845,910,111,195,195,852,557,565,474,540,672,774,195,734,909,195,195,279,195,999,195,195,900,726,97,195,303,681,558,522,195,864,978,945,564,954,756,781,610,825,877,348,258,952,420,453,462,825,195,681,987,822,444,882,819,734,195,426,619,843,894,357,908,981,826,549,195,553,540,360,534,741,318,720,690,309,197,690,431,414,195,195,681,195,357,9,623,762,13,861,195,771,582,966,195,963,195,516,368,993,195,291,393,579,201,834,195,699,723,243,723,195,648,972,720,195,195,462,965,288,771,693,750,222,604,62,558,618,324,195,122,735,495,975,675,441,568,597,468,195,823,696,540,738,360,195,972,195,195,424,195,777,198,480,285,816,593,195,717,195,720,666,195,195,160,819,195,195,195,381,948,363,618,852,195,792,546,122,849,527,513,759,531,195,254,327,315,351,276,444,558,195,429,195,399,195,312,9,780,867,333,909,555,324,654,665,195,222,693,288,639,795,195,333,690,774,195,528,270,555,195,285,195,195,741,858,195,480,195,195,195,215,681,405,285,195,681,303,195,924,195,195,663,125,639,444,195,195,612,195,195,26,195,327,193,195,351,404,268,841,534,195,195,254,195,480,456,451,8,195,195,195,435,630,195,348,366,308,750,558,726,912,875,21,857,152,324,393,933,262,378,882,294,948,404,519,993,987,792,195,825,195,195,627,156,390,105,195,891,195,414,695,195,726,195,195,977,195,195,345,932,750,195,804,195,195,966,855,133,24,279,195,411,408,195,195,313,195,195,615,873,195,195,1000,195,195,195,630,195,669,249,195,195,792,693,309,73,195,195,867,195,195,195,771,540,666,471,666,819,831,585,999,421,573,195,440,990,304,789,546,284,471,390,195,477,195,495,924,639,427,792,195,251,195,249,984,195,195,434,867,639,195,690,372,756,796,195,978,195,195,378,284,384,510,366,195,789,750,486,525,999,195,876,470,108,933,477,122,195,179,763,371,924,339,627,345,252,142,882,195,783,747,195,348,279,195,573,195,355,897,707,195,723,195,813,867,151,456,195,195,663,981,195,285,972,885,195,902,195,357,754,777,195,861,195,924,723,746,991,195,195,195,195,195,420,819,729,209,268,797,195,195,195,849,401,757,195]
    print(Solution().scoreOfStudents(s, ans))
    print(Solution().scoreOfStudents2(s, ans))
    s = "4+8*8+4*4+4*4+8+8+4*4+4*4+4"
    ans = [336,152,200,788,626,376,636,152,848,212,360,460,852,152,756,152,152,804,560,152,152,152,152,831,608,751,276,152,948,152,556,528,152,456,560,224,332,688,15,556,152,152,152,760,830,152,152,152,445,152,815,760,152,744,892,152,532,420,405,616,204,624,878,272,520,224,568,690,556,979,844,143,752,11,152,152,152,340,152,968,152,152,864,588,937,35,532,764,676,152,152,883,500,311,400,192,152,701,284,374,152,796,152,85,345,152,907,152,55,960,152,152,456,456,944,992,456,700,500,412,954,832,936,152,432,502,600,271,152,932,571,476,152,236,828,152,540,744,89,248,152,164,49,219,152,332,180,561,152,152,152,404,152,484,171,544,676,212,324,832,988,490,152,733,312,316,152,832,468,444,919,968,452,176,828,152,636,656,688,620,652,600,497,180,177,776,152,504,6,741,600,896,180,212,288,288,804,129,365,29,510,912,835,492,204,788,404,640,152,693,152,903,387,152,260,429,152,912,152,152,828,623,572,760,152,152,632,152,152,404,152,152,684,224,671,984,509,336,611,812,152,42,551,496,139,680,868,738,228,524,152,136,920,152,260,212,68,152,932,308,3,924,81,1000,152,152,840,824,152,369,888,564,320,152,784,152,800,152,816,600,291,152,673,656,656,300,325,548,924,615,152,368,752,419,840,704,864,683,276,288,964,941,152,528,745,555,350,560,992,944,784,888,152,152,864,950,908,352,868,724,152,640,708,624,299,912,572,796,571,152,152,592,152,71,152,152,484,395,748,272,752,364,152,416,968,449,232,152,152,152,864,952,152,152,672,152,272,152,640,524,740,152,300,183,350,548,152,607,417,180,152,152,708,6,152,988,529,668,633,672,152,152,260,152,100,152,484,584,236,152,152,448,940,152,964,304,152,420,152,556,596,412,813,400,348,536,152,948,712,512,152,992,916,808,672,920,636,807,152,49,384,152,152,404,152,152,548,152,82,228,344,204,684,540,460,152,152,967,704,152,537,152,152,402,152,532,152,396,660,792,152,504,504,296,152,152,637,554,152,152,62,940,152,332,152,832,922,748,470,780,636,112,762,152,444,640,412,704,152,50,820,544,152,736,751,152,243,565,152,662,152,560,152,70,152,152,83,152,248,740,152,684,152,152,536,536,152,152,284,699,324,216,636,152,452,152,152,85,152,152,524,152,152,628,800,492,152,356,904,496,488,152,121,548,576,152,284,370,276,360,312,15,152,904,328,364,224,152,724,152,336,300,355,400,456,420,332,360,152,768,192,408,187,952,224,152,152,484,152,692,264,152,716,264,424,904,564,152,576,152,408,935,672,944,152,152,596,248,620,152,152,516,491,152,804,800,832,428,152,152,484,68,680,152,908,704,152,152,464,152,736,626,516,152,872,551,152,152,768,472,152,968,152,860,437,248,152,820,620,224,152,180,906,748,612,500,152,636,152,152,336,440,388,832,356,152,353,584,152,992,511,696,293,928,530,853,152,416,152,354,152,176,152,225,368,520,400,152,528,548,152,912,752,152,660,152,152,152,152,996,240,524,152,372,201,152,440,520,252,617,54,884,688,152,152,91,991,920,296,392,772,916,752,885,152,365,152,615,844,700,592,708,320,204,368,448,912,152,152,772,67,632,424,152,908,588,312,152,584,710,356,956,596,152,605,152,572,864,420,310,956,197,152,406,848,836,828,352,152,356,636,152,516,580,747,152,997,152,152,152,152,152,916,447,131,757,152,847,993,548,224,896,382,928,204,624,452,200,152,152,152,518,152,152,152,848,152,760,152,964,152,620,152,152,408,712,428,689,964,152,656,90,353,152,436,660,756,991,152,332,952,20,884,564,964,152,152,152,445,596,152,768,152,554,960,624,712,152,152,928,988,415,520,764,152,876,152,944,822,436,152,416,700,152,372,884,152,152,728,740,568,152,848,152,152,152,696,152,508,856,904,440,152,372,372,376,604,152,740,152,901,872,513,152,152,647,934,33,872,532,152,1000,152,152,460,692,556,468,152,448,264,224,152,316,556,477,79,248,474,288,480,680,152,152,667,801,528,924,628,804,552,152,152,748,308,192,830,184,749,789,672,152,289,556,152,164,267,782,432,1000,224,932,636,152,696,395,964,328,152,152,356,752,152,152,152,424,129,152,152,304,152,76,152,756,404,76,152,712,512,939,484,152,766,152,308,400,152,152,152,372,152,152,936,336,420,228,796,216,740,544,743,336,152,472,231,564,152,152,325,152,788,152,152,551,91,152,152,784,584,152,572,152,44,152,152,152,152,914,889,964,748,868,228,152,752,152,824,892,152,152,177,152,840,152,636,778,816,290,908,167,790,437,836,754,728,308,332,764,848,81,496,164,436,696,336,336,136,804,61,552,152,597,502,152,924,724,612,275,152,152,276,152,152,606,679,152,372,869,174,152,576,600,940,30,532,152,792,152,152,348,640,152,628,464,772,596,472,152,796,388,708,769,152,448,229,512,856,152,540,248,692,152,270,480,588,300,152,365,756,277,771,152,152,264,152,152,152,27,97,252,216,152,468,876,180,956,952,152,956,848,776,152,420,709,512,187,152,636,788,152,53,241,584,548,152,399,560,152,780,452,152,572,836,152,568,152,152,568,75,476,152,818,936,698,532,461,899,135,680,227,236,94,980,152,448,40,561,408,979,904,804,152,364,152,209,152,152,408,352,416,152,152,892,152,463,560,152,864,152,152,320,152,704,348,848,152,300,708,804,805,424,998,152,796,152,152,384,596,688,152,424,806,660,152,740,152,544,600,568,564,152,420,152,927,152,152,274,250,152,956,152,727,904,472,28,804,152,844,64,932,660,284,192,152,457,916,864,684,540,728,240,492,472,152,192,948,164,282,940,284,664,370,88,960,972,728,688,152,468,284,456,138,204,152,152,152,344,152,832,152,182,324,152,284,152,672,664,368,636,396,152,368,976,544,844,152,504,152,453,426,700,984,495,152,31,476,152,928,545,152,596,732,737,152,668,144,248,517,152,992,152,912,152,336,152,580,756,622,352,852,915,254,596,758,152,740,152,152,844,964,152,632,999,452,488,152,152,126,852,152,457,13,152,152,152,832,960,628,152,34,187,152,812,152,736,436,304,884,536,868,296,936,66,164,864,152,395,912,680,152,444,772,152,152,962,152,676,616,152,908,152,448,152,660,820,243,152,920,256,915,834,600,932,596,152,152,152,748,628,314,889,237,110,484,774,152,768,152,924,152,540,696,652,344,392,848,152,270,204,175,399,152,944,152,804,620,270,218,228,216,152,980,560,320,152,166,397,880,652,669,216,152,656,916,444,876,492,986,176,952,764,452,152,152,944,152,152,372,152,832,324,1000,152,152,468,661,496,360,500,588,152,8,58,756,152,928,412,152,988,564,616,444,356,59,716,152,392,848,848,691,212,424,632,152,677,600,640,552,570,959,288,152,572,524,152,695,440,152,152,868,873,152,344,204,916,152,808,784,925,284,956,556,656,394,266,828,388,152,480,152,278,152,152,152,152,152,384,724,560,473,992,152,5,152,380,152,152,194,440,852,152,484,776,796,152,796,912,688,891,368,943,804,767,976,804,718,152,560,586,216,152,152,152,952,152,815,252,266,152,767,152,476,928,887,794,767,783,640,956,152,152,348,690,512,152,312,152,870,300,152,152,396,424,636,152,152,152,264,152,152,768,484,500,878,432,407,488,560,152,820,757,596,810,152,310,856,784,668,152,384,505,633,838,152,152,564,152,452,152,452,739,312,152,708,753,312,568,672,900,898,45,152,407,476,216,190,1000,300,96,825,360,784,152,344,740,74,152,852,600,152,152,152,960,600,756,152,56,192,242,212,152,587,572,152,376,332,364,788,904,620,364,458,152,152,152,933,584,109,388,364,176,516,928,732,152,152,152,152,152,684,680,412,152,812,202,256,532,440,436,528,152,152,508,588,912,152,780,152,916,152]
    print(Solution().scoreOfStudents(s, ans))
    print(Solution().scoreOfStudents2(s, ans))
    s = "4+8*8+8+8*8+4*4+8*4+8*8+8*8+8"
    ans = [812,324,843,924,496,940,856,324,624,668,588,372,928,324,146,684,324,608,436,187,708,324,324,414,134,324,324,800,649,684,576,324,324,781,523,324,826,520,324,324,324,324,324,72,949,340,193,916,324,324,860,844,552,324,324,896,492,324,592,488,988,168,907,800,740,476,324,324,103,324,324,324,484,912,580,918,824,324,97,884,185,916,324,496,853,908,588,324,866,552,526,91,324,324,972,324,632,536,324,611,324,324,256,362,670,324,324,324,768,368,780,324,622,936,608,324,324,722,764,835,922,957,984,324,324,945,324,324,840,236,324,324,324,324,324,324,655,324,904,256,992,285,821,951,324,904,324,545,851,324,719,391,632,915,935,324,904,324,324,884,324,324,400,324,856,872,324,791,560,324,772,324,954,324,324,212,588,536,706,576,324,177,932,324,369,324,607,940,810,547,715,564,324,177,832,680,324,844,324,324,799,231,324,379,397,492,324,448,956,324,884,716,434,324,324,616,712,428,324,324,312,632,372,383,704,372,680,955,118,484,629,375,324,884,324,696,193,411,324,468,324,324,836,664,324,41,736,278,604,324,488,324,324,324,324,324,694,324,67,568,349,596,996,880,324,324,624,324,604,488,756,6,628,684,324,380,770,596,728,324,324,324,324,324,768,589,736,367,382,988,324,692,324,324,764,660,459,392,329,324,324,312,829,868,620,161,861,712,187,324,468,792,783,324,324,611,400,324,324,728,324,896,740,363,800,899,109,324,503,916,868,324,324,724,633,324,804,508,708,928,324,788,324,352,988,672,453,324,601,488,658,407,39,324,712,588,477,764,756,324,752,880,324,998,324,680,684,324,324,631,544,832,912,604,234,324,995,333,653,324,400,680,347,324,702,822,593,444,546,377,988,596,1,324,324,620,412,800,324,595,924,324,984,324,656,613,270,432,928,802,644,79,324,324,287,606,324,324,804,668,905,846,544,324,324,932,324,148,672,280,878,964,732,608,454,478,324,596,521,913,916,676,540,324,560,589,324,324,752,324,324,249,324,324,480,324,804,324,997,635,428,324,324,531,525,612,324,324,740,924,324,324,324,612,996,825,324,976,872,324,964,952,696,548,324,70,484,324,267,844,724,324,324,876,706,336,324,356,792,526,904,820,932,704,413,592,440,848,11,734,324,552,648,964,624,324,885,664,324,769,624,940,923,720,324,996,936,888,440,560,568,676,981,324,324,324,904,455,504,324,7,324,703,936,29,564,560,321,728,219,956,812,493,358,384,544,324,324,405,324,324,324,628,476,779,920,999,277,324,646,324,146,167,518,469,456,564,892,367,832,527,840,640,792,324,324,438,949,932,324,324,422,961,908,700,317,656,756,400,568,880,324,836,348,324,324,324,324,324,852,877,440,132,664,181,698,840,728,904,791,324,680,591,647,554,644,548,324,898,324,189,696,324,664,552,324,928,457,8,680,495,740,1000,852,324,842,804,632,940,396,324,504,568,576,961,878,484,440,534,449,544,263,324,612,38,796,599,837,856,720,660,76,397,324,324,116,228,225,324,673,984,972,960,413,334,461,744,324,324,704,772,403,324,89,324,685,1000,104,72,128,844,812,324,41,324,324,324,233,324,856,792,766,357,564,324,572,646,84,324,393,488,896,586,312,117,324,652,324,324,324,324,720,580,324,142,324,986,612,56,592,324,386,912,627,299,849,753,845,770,485,412,632,101,21,752,883,703,409,840,226,544,768,560,660,363,740,516,944,736,228,324,324,956,656,611,640,948,459,569,324,324,324,408,580,696,324,488,287,63,20,324,324,324,324,324,604,672,940,784,324,324,298,434,324,381,300,324,972,780,324,721,909,377,942,324,908,324,772,954,324,472,568,532,870,324,582,786,324,324,448,800,488,944,324,220,324,425,324,125,324,998,324,960,324,324,324,324,324,684,324,944,520,960,988,536,753,972,772,324,195,87,744,324,324,74,887,896,532,145,496,904,512,834,324,492,324,574,454,964,99,324,324,520,457,823,434,596,732,324,324,195,197,352,324,324,952,877,324,680,912,324,820,324,324,399,457,752,752,934,68,324,927,324,947,928,972,576,324,324,861,342,324,324,324,912,751,324,324,628,964,261,324,589,507,324,324,324,324,856,617,247,105,744,592,300,84,880,384,324,324,504,984,984,324,796,324,352,708,324,416,540,476,188,726,712,324,324,324,652,324,440,568,324,572,324,324,524,324,428,324,616,324,336,680,219,324,776,732,984,282,13,440,324,324,487,324,913,499,324,872,436,503,876,812,484,324,734,324,564,939,738,820,1000,324,324,114,516,366,324,464,840,200,324,324,628,832,77,800,844,652,916,259,820,324,324,324,324,324,880,824,471,728,324,273,834,736,712,324,324,118,766,996,512,324,396,619,324,324,420,813,928,324,981,324,900,490,343,491,764,324,324,724,728,315,324,324,239,420,919,324,304,324,418,324,406,324,960,324,949,499,620,904,648,324,324,552,324,324,912,324,785,444,324,812,880,324,932,324,324,676,324,324,988,643,324,800,324,324,49,696,860,664,324,624,530,764,324,324,516,844,583,832,811,828,171,509,595,324,324,560,441,464,13,876,827,509,324,324,776,996,324,836,324,544,324,883,548,684,324,540,99,904,324,652,1000,324,207,324,324,265,652,716,320,724,145,400,755,324,695,852,832,691,986,324,620,109,357,324,324,400,992,800,688,744,324,464,111,884,477,324,324,324,324,439,324,964,43,324,324,997,324,324,146,324,800,324,558,302,740,650,324,324,672,704,632,9,149,284,324,672,324,625,172,704,324,1000,852,697,836,324,592,497,324,548,448,872,324,290,617,959,859,524,3,615,324,254,840,904,324,736,888,1000,820,324,852,696,324,324,324,792,230,605,868,324,324,860,37,490,860,512,81,996,324,996,592,339,916,600,836,324,792,802,454,626,372,599,138,821,22,324,324,920,728,824,860,968,324,324,24,516,324,324,752,324,324,596,324,559,324,476,324,46,324,324,324,533,564,387,880,324,324,476,324,908,688,324,324,275,324,792,794,984,324,851,493,776,952,130,250,724,324,772,324,464,366,63,362,528,604,856,324,955,860,740,710,440,172,486,372,884,300,440,836,827,835,712,936,443,134,580,888,40,324,894,732,920,804,480,876,872,335,324,632,848,592,324,324,899,516,732,528,884,484,316,480,324,624,324,744,880,600,592,296,256,904,122,616,743,864,324,541,446,324,104,860,940,67,624,476,324,968,324,929,324,560,728,876,612,552,324,777,952,330,684,75,860,324,829,324,940,768,324,464,616,956,850,724,896,619,492,752,822,30,960,868,884,852,324,712,616,540,324,568,324,324,496,324,324,324,339,324,324,584,224,924,305,26,324,524,156,324,324,896,588,520,274,324,127,820,442,753,295,515,324,723,324,604,987,490,254,551,324,42,324,720,174,876,804,400,324,799,324,600,164,324,535,324,324,324,560,324,324,946,324,668,324,102,12,171,324,324,476,815,324,978,867,724,464,544,886,788,594,324,324,324,468,324,772,324,852,324,324,512,908,710,676,324,848,548,984,324,884,553,428,82,324,194,844,659,324,324,780,492,324,880,324,324,324,324,496,478,324,863,791,65,905,324,976,324,792,524,524,350,792,432,209,324,832,220,940,324,496,660,324,296,544,624,876,324,604,324,732,785,759,261,324,324,644,471,819,434,603,840,480,599,484,587,255,921,324,445,324,967,852,178,324,776,916,548,436,912,867,744,213,93,492,324,684,324,324,188,329,836,926,484,936,324,448,724,710,807,916,324,816,175,24,324,406,82,324,904,324,788,296,621,822,372,532,324,324,436,496,684,324,262,696,992,951,653,650,852,944,324,324,324,836,324,596,663,324,324,524,258,205,440,548,464,324,324,349,324,670,952,589,768,540,261,972,944,220,324,324,928,324,868,792,852,324,324,324,716,324,369,979,324,514,749,324,324,728,947,324,584,52,324,269,324,324,468,428,324,946,946,413,324,324,852,584,964,292,189,420,952,564,828,504,540,177,217,324,191,324,324,873,324,324,204,660,324,516,316,324,420,324,487,348,628,324,324,520,997,820,352,932,324,735,176,149,272,324,461,988,64,488,764,876,856,695,324,488,324,920,791,967,324,761,121,324,324,194,776,385,740,428,688,668,641,324,324,716,324,592,324,820,324,324,324,684,661,319,378,516,552,878,496,957,612,908,236,751,832,233,324,65,324,385,324,352,560,464,261,372,239,324,408,324,744,561,584,804,306,177,720,324,956,416,308,324,283,264,300,888,324,436,738,694,981,324,984,35,576,832,592,744,934,716,890,324,812,597,324,868,930,324,324,324,848,952,902,324,324,380,951,153,324,940,324,580,220,688,768,516,324,573,788,660,324,807,324,377,959,447,324,476,324,26,324,600,751,324,324,687,817,294,868,989,158,352,324,844,558,324,504]
    #print(Solution().scoreOfStudents(s, ans))
    print(Solution().scoreOfStudents2(s, ans))
    print(Solution().scoreOfStudents3(s, ans))
'''
-Hard-
*Union Find*

In a network of nodes, each node i is directly connected to another node j 
if and only if graph[i][j] = 1.

Some nodes initial are initially infected by malware.  Whenever two nodes 
are directly connected and at least one of those two nodes is infected 
by malware, both nodes will be infected by malware.  This spread of 
malware will continue until no more nodes can be infected in this manner.

Suppose M(initial) is the final number of nodes infected with malware in 
the entire network, after the spread of malware stops.

We will remove one node from the initial list.  Return the node that if 
removed, would minimize M(initial).  If multiple nodes could be removed 
to minimize M(initial), return such a node with the smallest index.

Note that if a node was removed from the initial list of infected nodes, 
it may still be infected later as a result of the malware spread.


Example 1:

Input: graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]
Output: 0
Example 2:

Input: graph = [[1,0,0],[0,1,0],[0,0,1]], initial = [0,2]
Output: 0
Example 3:

Input: graph = [[1,1,1],[1,1,1],[1,1,1]], initial = [1,2]
Output: 1
 

Note:

1 < graph.length = graph[0].length <= 300
0 <= graph[i][j] == graph[j][i] <= 1
graph[i][i] == 1
1 <= initial.length <= graph.length
0 <= initial[i] < graph.length

'''
from collections import defaultdict

class Solution(object):
    def minMalwareSpread(self, graph, initial):
        """
        :type graph: List[List[int]]
        :type initial: List[int]
        :rtype: int
        """
        n = len(graph)       
        roots = [j for j in range(n)]
        def find(roots, i):        
            while roots[i] != i:            
               roots[i] = roots[roots[i]] 
               i = roots[i]
            return i
        def union(i,j):
            x, y = find(roots, j), find(roots, i)
            if x != y: roots[x] = y 
        min_infected = n+1        
        res = 0
        for i in range(n):
            for j in range(n):  
                if graph[i][j] == 1:
                    union(i, j)
        nodes = set([i for i in range(n)])            
        for i in sorted(initial):                        
            infected = 0
            A = set(initial)
            A.remove(i)
            B = nodes-A
            for j in B:
                for l in A:
                    if find(roots, j) == find(roots, l):
                        infected += 1
                        break
            infected += len(initial)-1 
            if min_infected > infected:
                min_infected = infected
                res = i 
        return res


if __name__ == "__main__":
    print(Solution().minMalwareSpread([[1,1,0],[1,1,0],[0,0,1]], [0,1]))
    print(Solution().minMalwareSpread([[1,0,0],[0,1,0],[0,0,1]], [0,2]))
    print(Solution().minMalwareSpread([[1,1,1],[1,1,1],[1,1,1]], [1,2]))
    print(Solution().minMalwareSpread([[1,0,0,0],[0,1,0,0],[0,0,1,1],[0,0,1,1]], [3,1]))
    print(Solution().minMalwareSpread([[1,1,0],[1,1,0],[0,0,1]],[0,1,2]))
    print(Solution().minMalwareSpread([[1,1,0,0,0,0,0,0,0,0],
                                       [1,1,1,1,0,0,0,0,0,0],
                                       [0,1,1,0,0,1,0,0,0,0],
                                       [0,1,0,1,0,0,0,1,0,1],
                                       [0,0,0,0,1,0,1,0,0,0],
                                       [0,0,1,0,0,1,0,0,0,1],
                                       [0,0,0,0,1,0,1,0,1,0],
                                       [0,0,0,1,0,0,0,1,0,0],
                                       [0,0,0,0,0,0,1,0,1,0],
                                       [0,0,0,1,0,1,0,0,0,1]]
                                      ,[3,1,9]))
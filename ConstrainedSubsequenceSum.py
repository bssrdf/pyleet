'''

Given an integer array nums and an integer k, return the maximum sum of a non-empty 
subsequence of that array such that for every two consecutive integers in the 
subsequence, nums[i] and nums[j], where i < j, the condition j - i <= k is satisfied.

A subsequence of an array is obtained by deleting some number of elements (can be 
zero) from the array, leaving the remaining elements in their original order.

 

Example 1:

Input: nums = [10,2,-10,5,20], k = 2
Output: 37
Explanation: The subsequence is [10, 2, 5, 20].
Example 2:

Input: nums = [-1,-2,-3], k = 1
Output: -1
Explanation: The subsequence must be non-empty, so we choose the largest number.
Example 3:

Input: nums = [10,-2,-10,-5,20], k = 2
Output: 23
Explanation: The subsequence is [10, -2, -5, 20].


'''
import collections

class Solution(object):
    def constrainedSubsetSum(self, nums, k):
        """
        :type nums: List[int]
        :type k: int
        :rtype: int
        """

        '''
        Let dp[i] be the solution for the prefix of the array that ends at 
        index i, if the element at index i is in the subsequence.
        dp[i] = nums[i] + max(0, dp[i-k], dp[i-k+1], ..., dp[i-1])
        Use a monotonic queue with the sliding window technique to optimize the dp.

        '''

        n = len(nums)        
        dp = nums[:1]
        #ans = dp[0]        
        dq = collections.deque(dp)
        for i,x in enumerate(nums[1:], start=1):     
            # dq[0] = max(dp[i-k], dp[i-k+1], ..., dp[i-1])       
            # if the maximum (dp[0]) = the leftmost in the window, it needs to go
            # via popleft(), then the next largest becomes the maximum sitting at dq[0]
            if i > k and dq[0] == dp[i - k - 1]:
                dq.popleft()
            tmp = max(x, dq[0] + x)
            dp += tmp,
            # monotonic queue: maintain that dq[0] is the largest, 
            # dq[1] the second largest ...            
            while dq and dq[-1] < tmp:
                dq.pop()            
            dq += tmp,   
           # print(len(dq))
        return max(dp)


if __name__ == "__main__":    
    #print(Solution().constrainedSubsetSum([10,-2,-10,-5,20], 2))
    #print(Solution().constrainedSubsetSum([10,2,-10,5,20], 2))
    #print(Solution().constrainedSubsetSum([-1,-2,-3], 1))
    #print(Solution().constrainedSubsetSum([-5266,4019,7336,-3681,-5767], 2))
    nums = [3448,-7037,1309,-1942,5542,7244,266,6708,-7507,1573,6288,9330,-4625,
    -298,6065,-642,-122,8279,1178,-5443,3627,4379,5103,-3650,-9149,-4449,4236,-9685,-7020,2673,-8033,-1179,6947,-4854,3332,3545,1098,7103,4531,-5999,-8978,6249,-8413,-3705,2389,-3774,2315,-2878,-4465,-329,-3256,-1315,-4290,3874,-5179,-1517,-8514,-8474,-1973,-8382,9682,1023,-6162,-9150,8290,9342,-1003,-134,810,-9847,3311,-6660,-9478,3295,-1108,4117,8218,-9158,-6566,9728,-3227,1698,-5408,-4434,7438,8445,-5705,-8680,6163,-4595,-1633,-4096,3692,-1046,-403,3972,5835,-3307,-6797,4776,9728,-4667,3574,-1460,-3491,7402,794,3065,4880,558,3123,2427,-6875,-1547,8886,3324,7927,4487,5782,5986,-605,-3672,5684,-1290,1218,7568,910,2941,-263,2581,8769,-6480,1968,4308,-6128,-6413,7922,-7038,-2783,-4890,8211,7858,-6395,1293,-8515,9320,131,-6591,7863,1095,-4845,-7461,8775,9312,-2634,8339,1821,5692,-1511,-5467,7849,-7480,4166,8152,7438,4340,3900,8421,9162,879,3298,-5723,8381,10000,4883,-377,-6077,-2356,-3903,-1450,2666,-9688,6507,-8558,-4507,-8480,-1760,-5948,-2322,-1213,-7889,-1069,4082,-7724,-4922,5864,-3242,6007,-549,-8122,-7933,5805,-8921,4228,-2738,6349,-4078,7378,780,1099,-6710,4961,-6559,-4384,-740,-5728,2300,5875,3729,-2372,-7178,3575,-9158,-5611,-8160,8760,1101,-874,-6863,-9363,-1995,8033,7837,-3329,681,-9166,2570,3023,2680,9321,-4344,2354,327,6497,-8133,-2882,1754,-6733,-6848,-1611,2606,6726,-6247,-2708,5738,5713,5607,-1056,-8656,4525,5651,-8819,-157,-538,-1150,-9525,122,-5109,-340,-5734,44,-3819,-2118,9526,9066,-2788,-1939,3806,2525,3846,-4270,5982,-6297,-2115,5807,532,3126,-5486,-5394,-8037,5215,-5309,-668,-8396,-1506,7910,-2051,-1358,1103,-6685,-3403,-489,1109,2606,-3348,-9798,3128,3244,-1076,-3485,6734,1162,-7501,6578,8106,1172,9915,-7878,-993,9,8786,6849,4282,7998,7099,-6158,1422,-2554,-5694,1121,-4166,-6812,1396,-7496,-9221,1698,9924,-5399,926,-835,-5360,-8042,-4130,4009,4926,1301,-5607,3177,-4189,-7666,-3931,-6263,9945,-3503,-1680,-441,9420,-7988,-5533,9572,4321,-9403,-6933,6229,9861,7293,-3161,3245,2773,-2217,-1656,-3122,-668,6610,6859,2507,3758,-3059,8867,-6674,-4181,3289,6089,5179,8164,-1926,7399,850,-7065,2735,-2168,432,-7443,1216,332,-6466,-5132,2612,-7380,4187,-7828,7619,-7491,-8449,5284,-1032,-670,9334,129,9970,-9724,8432,-611,2480,4814,-1639,-972,-3143,4747,1055,-9999,8159,-8447,440,7677,4307,56,9677,1325,6210,6863,923,1421,-8203,2435,-7393,6558,8186,-60,1721,5366,-7411,5945,-2398,7989,-7721,3215,-7598,-781,-8721,-9901,-2175,-9038,-4050,8497,8003,-6428,4873,-4984,2610,-5770,-8373,-4648,1152,-3545,4363,5259,-777,6876,1595,-1420,-1303,9787,8427,-4085,-8133,-5674,-7559,-3796,4157,9347,-6276,5719,3193,2678,-2671,8831,8037,-863,-3961,-2270,-9965,-2441,-5448,7599,6836,10,3488,-9342,-8128,4629,-4151,-5514,7942,-3864,-1653,1842,9814,2581,-284,7751,-2819,-5159,388,5184,4301,-6629,-1866,-6232,7148,-9513,5405,-792,4606,3414,2907,8439,-6752,-6888,-6146,-5425,-3861,3545,-884,-3487,-7617,6634,-2112,-9725,-690,8149,4301,302,-9926,8249,-766,-7653,6697,4849,-7044,-7952,4536,9306,2568,1783,-8275,7113,-5488,-1023,-2689,-663,-2094,-2068,7691,-8579,-8484,4761,-7534,6299,-8096,-3698,-2154,-5147,9482,7626,327,6056,-2290,-8156,-7287,-7810,5440,1923,-3588,-2009,-2121,-1973,-6877,5185,4990,-7921,-1980,-5845,-8200,1668,-3317,2019,5696,5199,-1115,1376,814,-3714,-53,5058,9994,2488,-5800,-1059,5358,4413,-2250,-4296,-1917,1571,2403,2051,-701,-751,-1990,6663,-9609,-724,2824,-3413,-8030,2876,5899,4424,-1547,-7214,7036,-8713,6183,-306,-4335,7923,9676,4674,-6370,-2016,-1794,8980,-3875,-3405,3187,-3184,-4158,-63,-8476,2489,7248,5846,4419,-1422,3347,-8533,3123,-2019,-3549,-685,150,9762,-1056,6084,4498,-6185,-3139,5452,1380,-3974,6630,-2767,9992,-8775,-6055,1769,-3397,5294,-6863,9525,5716,8962,2276,8553,6055,-4841,7311,-690,-308,8845,4536,2301,-9161,-972,8273,8646,-1673,6967,-9045,9538,190,4119,-9068,6359,-9062,6429,-9572,3401,-2775,9356,-4720,7330,3022,-5438,9094,268,2072,-8566,-6031,-6516,5018,2599,-3996,4379,4030,-6208,-9094,-5593,-7991,-5156,-1272,-7422,-8963,-2271,-9740,-6225,-2454,-4606,-4644,2238,-7175,-5985,2922,3783,-6643,-9060,2904,166,8946,-4114,-2527,-2210,-1315,4536,2799,6502,-8160,-4721,6904,-6653,7260,6704,4274,-5460,-5421,801,-1189,-4679,749,5243,6455,-6969,3421,-381,20,1013,4768,5314,-3525,9339,3951,-4883,8215,-5289,5680,-1697,-357,-7615,981,-7264,9801,7689,-1734,-5221,-2693,-111,-9785,9260,3737,-9396,-3196,5298,1873,1611,9546,-40,-3808,-5563,-8013,3176,5874,8859,-6580,-8325,1332,7141,-7367,4284,9238,5707,-9528,6293,-8957,1676,1289,-1100,1973,-566,5261,-3448,-7123,-6539,-9262,-3317,6900,4188,6827,-5920,9573,2930,-1023,3435,-7054,-6239,-3807,-4355,-3584,-5208,-6937,2245,1967,-1675,5332,3114,-713,-1161,-6249,-152,3911,-3891,-7114,1432,-2042,-5406,345,8786,2310,2398,-4341,2776,8485,-2874,-9732,-7613,3548,-3948,-1649,-1672,4845,4139,524,5129,-9991,-9479,3477,-9808,2670,4092,-6288,-2093,-844,-7277,1397,9691,7887,1174,7960,9021,-1320,-4679,4445,-7349,4431,-7725,8724,-8346,5090,-604,-1719,-2365,2349,5603,-5135,4658,-7576,658,8041,7795,8293,2421,-356,7399,-7610,5725,6099,-9799,-104,2479,-7140,-6269,6585,8051,7383,4414,5643,2320,7601,1284,-1702,-8249,-3431,-9411,-868,2403,4554,6426,-5396,9349,-6882,-4142,6640,-4251,-4419,-3664,-474,2441,2544,6719,1994,-2110,-8936,-8168,-8207,8579,-445,5379,-4949,-3773,1848,3597,8216,4726,4643,-5634,-517,1790,2413,6658,-4071,8485,-5645,-7031,5639,-845,-3709,-1967,5947,7637,-7427,9309,-7792,3967,7728,3474,-9401,1110,8580,-1394,5877,3887,50,-505,-8790,7819,7574,-7890,4744,7467,-5987,6133,-1900,-6408,1355,-6812,1736,-1979,-5237,-6437,-6293,-5752,3526,4904,-4848,5398,398,1746,-4169,336,-620,9891,-6632,-1420,7328,1719,6286,-7358,-7914,-2316,-5046,7887,-633,7278,3839,-6188,-7122,5129,-6944,-5399,2657,-2628,-9492,-3599,-4697,984,-664,-2261,-2312,-9894,2777,-9544,-7063,4761,5516,9677,-8646,-8690,-7695,6470,7577,1593,4930,973,8261,5147,2470,5744,6741,9219,-4054,2253,-3597,-1116,-485,-481,8179,9320,9211,-2353,-9346,-242,-4540,-5322,-4647,255,-1683,-7921,-5937,-5753,-4531,5955,-6612,-29,-3449,-4413,-8890,2561,-5419,-4928,-3008,-9463,9029,8850,-4640,-2205,-2867,-369,6232,2304,-8888,-2416,4420,5903,-4261,-8851,4809,7411,5923,7028,4407,-8749,1244,8099,127,4162,-1625,-3563,2261,-9409,-1681,-6524,-7291,6224,8117,-5875,925,9065,-8899,501,-2840,-7309,-3364,7627,-9729,-3801,-8490,1732,4553,3634,-5972,8573,676,-4719,4538,8588,7926,-3014,2942,-5458,7279,8022,6113,-5748,9910,9113,6323,-8178,-6457,7514,6142,3273,-9541,4226,1565,-1912,4807,4941,-8160,-3907,-4209,5042,531,5765,-4585,-5480,4414,-1722,-1668,-9059,-3696,-6713,9282,-1905,3975,-6320,9654,-1368,-6107,-9835,-7159,-1159,7597,719,6817,-8765,2683,-4939,-1901,2323,1817,494,-8276,-7485,8691,6547,358,8775,2729,-9975,-2421,-2339,846,8081,-3709,-7895,-8086,3613,-6036,-6599,-5542,7726,83,-4102,9563,4842,-8068,9306,-8776,-7419,322,-1978,9948,7831,-1314,-1487,6873,-3392,-9619,3908,-4446,-75,-4601,8749,-777,191,-1845,-9452,-379,7090,-3267,-3315,4359,-9611,-1401,-4710,7151,-131,-6761,-2054,-7528,7325,892,-1092,-8388,8660,-8415,3682,4780,-2407,3468,8994,3560,4680,-4082,-3930,6928,-4116,-5798,-4361,750,-3748,1030,-7412,1876,-6764,-1913,-2544,-2698,-4704,-9260,7914,8441,7237,8118,-2187,-326,9345,-487,132,2912,-6485,-9831,-7025,-2978,2723,-1770,-5193,-5720,-1156,8028,-3917,7040,8031,2635,2480,-8867,6142,-532,-8821,-2863,9358,3012,2786,6556,979,-4135,-7267,8422,7336,1869,1746,-9635,-5002,8263,-6319,-5387,-1464,-1537,1125,7953,-1519,8669,8663,8714,6243,6060,1342,1926,-2426,-7369,-151,473,-9868,4629,-3263,8758,2702,-4419,-724,4330,-4596,7451,9604,4538,6856,3393,1513,-9347,6023,-4908,-5818,3816,-6730,6479,6361,-5729,-7942,-6835,-6850,5132,-1183,6687,-2317,-812,-3104,-3555,-4680,823,-9672,7733,-4752,-6693,-9536,-5054,5308,6487,-5751,-4838,9938,-5118,4851,2946,9147,6778,8163,4053,-5423,1799,-163,4030,7560,9762,5580,2570,-6787,-9144,5427,-1501,-2363,-8118,-4678,-5631,-2337,-5903,7958,-7757,-147,3613,1190,1286,1410,-2733,-376,7732,8190,9150,-8201,-1474,7932,9588,5434,-2338,8384,-8619,-2295,6653,-1837,-2929,1508,-1893,1756,-6476,8280,-6846,5200,-3435,-2086,5340,7740,4631,1286,-4688,7680,1607,-2844,2948,-2240,5657,7262,5248,9865,1081,8435,-8020,-4678,-7335,6831,9598,6351,5162,-6856,4195,-6549,-9378,-6089,-8697,-7796,3660,-5045,-285,-2329,1983,-272,9149,-9483,8848,-9393,9468,-117,6501,9609,-9861,-6049,8993,257,-1602,-6901,-96,-7857,8837,-8213,-130,-9685,8481,1504,-7787,355,9466,-4180,-2923,9929,2585,-1165,-6806,3532,-559,-2852,-3249,8247,8816,-7965,-50,3133,-1356,-8066,6977,-3598,-9966,8428,8664,213,3629,-9214,-7658,-1875,-2830,6948,-8040,-4033,2242,4878,-7939,2690,4309,2967,7246,-2138,6263,-4496,-6308,9417,-2671,-361,9248,-5675,-9771,-4555,-906,-2343,-1444,-4594,8852,5181,3292,873,4311,-1402,1288,-6902,7020,-2636,-4995,-8628,3144,5913,8099,-7148,-2593,4836,4079,9261,-1515,-6639,-8624,-5017,906,4381,4147,-3540,1598,-3246,8609,-7326,-9318,-182,8295,8779,-4104,3113,-6496,7033,-5831,2875,2565,-5401,-7639,8864,-7907,618,-4232,5746,-7133,-7910,-7219,-4149,5777,-8566,-2301,-8582,-5927,5234,8604,3784,-2002,-4083,-7420,7774,2401,2892,-1272,5428,2083,7683,5485,2417,2832,-2062,2535,732,5382,1088,-2675,-853,4317,-4168,-6565,-2807,-3258,-524,3009,4295,2811,4764,-7312,-5215,-8725,-6562,-4096,-8995,9926,9651,-5821,-9665,6804,-2470,8267,425,-8552,-2215,-470,7781,2859,-8581,-329,-5452,-7897,4308,4960,9315,-8802,5564,3887,-3881,-8965,-8332,-2607,-110,4888,-8348,1773,-2288,-8060,-6646,3728,4624,-1048,8927,3453,-2212,6845,-5487,3413,-506,-9843,8529,-527,-3076,4924,-4213,-5655,6330,9061,5209,-2334,-6942,8576,-3377,-5938,4276,-6981,-695,-913,-8353,-9320,1249,653,5863,6922,7517,-8162,1014,4969,1488,3001,7132,8214,1563,2515,1206,-5956,-2646,-5945,236,-6266,6175,3280,254,9408,-9028,4353,-1595,-4190,-9083,6464,-199,8708,9126,1209,-2196,5576,2868,1714,-9744,-6455,-8227,1803,9860,-943,-1047,2777,9858,-8785,5027,8588,2911,-9006,2053,-9861,4248,1739,5232,7757,-9287,6611,-5239,2865,-229,3518,165,-2233,9334,6237,-769,-3099,-3013,-6344,-6693,1597,-764,-8919,8298,-9108,0,4169,-2477,5291,4939,6046,-7038,-8548,-7878,-4383,2521,1466,-8475,4514,5025]
    print(Solution().constrainedSubsetSum(nums, 15))
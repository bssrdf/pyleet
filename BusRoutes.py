'''
-Hard-

*BFS*
We have a list of bus routes. Each routes[i] is a bus route that the i-th bus
repeats forever. For example if routes[0] = [1, 5, 7], this means that the 
first bus (0-th indexed) travels in the sequence 1->5->7->1->5->7->1->... forever.

We start at bus stop S (initially not on a bus), and we want to go to bus stop T. 
Travelling by buses only, what is the least number of buses we must take to 
reach our destination? Return -1 if it is not possible.

Example:
Input: 
routes = [[1, 2, 7], [3, 6, 7]]
S = 1
T = 6
Output: 2
Explanation: 
The best strategy is take the first bus to the bus stop 7, then take the 
second bus to the bus stop 6.
 

Constraints:

1 <= routes.length <= 500.
1 <= routes[i].length <= 10^5.
0 <= routes[i][j] < 10 ^ 6.

'''
from collections import defaultdict
from collections import deque

class Solution(object):
    def numBusesToDestination(self, routes, S, T):
        """
        :type routes: List[List[int]]
        :type S: int
        :type T: int
        :rtype: int
        """
        if S == T: return 0        
        bus2stops = defaultdict(set)
        queue = deque([(S, 0)])
        for i, stops in enumerate(routes):
            for s in stops:
                bus2stops[s].add(i)
        visited = set([S])
        #visited = set()
        while queue:
            (stop, buses) = queue.popleft()
            if stop == T: return buses
            for bus in bus2stops[stop]:
                for s in routes[bus]:
                    if s not in visited:
                        visited.add(s)
                        queue.append((s, buses+1))
        return -1

    def numBusesToDestinationBiBFS(self, routes, S, T):
        """
        :type routes: List[List[int]]
        :type S: int
        :type T: int
        :rtype: int
        """
        if S == T: return 0        
        bus2stops = defaultdict(set)
        queue_s = deque([(S, 0)])
        queue_t = deque([(T, 0)])
        for i, stops in enumerate(routes):
            for s in stops:
                bus2stops[s].add(i)
        visited_s = {S:0}
        visited_t = {T:0}   
        while queue_s and queue_t:
            (src, cnt_s) = queue_s.popleft()            
            for bus in bus2stops[src]:
                for s in routes[bus]:
                    if s not in visited_s:
                        if s in visited_t: 
                            cnt_t = visited_t[s] 
                            return cnt_s+cnt_t+1
                        visited_s[s] = cnt_s+1
                        queue_s.append((s, cnt_s+1))         
            (tar, cnt_t) = queue_t.popleft()            
            for bus in bus2stops[tar]:
                for s in routes[bus]:
                    if s not in visited_t:
                        if s in visited_s: 
                            cnt_s = visited_s[s] 
                            return cnt_s+cnt_t+1
                        visited_t[s] = cnt_t+1
                        queue_t.append((s, cnt_t+1))            
        return -1

    def numBusesToDestinationBiBFSOptimized(self, routes, S, T):
        """
        :type routes: List[List[int]]
        :type S: int
        :type T: int
        :rtype: int
        """
        if S == T: return 0        
        bus2stops = defaultdict(set)
        queue_s = deque([(S, 0)])
        queue_t = deque([(T, 0)])
        for i, stops in enumerate(routes):
            for s in stops:
                bus2stops[s].add(i)
        visited_s = {S:0}
        visited_t = {T:0}   
        work_queue = queue_s
        visited = visited_s
        visited_other = visited_t
        while work_queue:
            (src, cnt) = work_queue.popleft()            
            for bus in bus2stops[src]:
                for s in routes[bus]:
                    if s not in visited:
                        if s in visited_other: 
                            cnt_t = visited_other[s] 
                            return cnt+cnt_t+1
                        visited[s] = cnt+1
                        work_queue.append((s, cnt+1))         
            if len(work_queue) < len(queue_t):
                work_queue = queue_s
                visited = visited_s
                visited_other = visited_t
            else:
                work_queue = queue_t
                visited = visited_t
                visited_other = visited_s
            
        return -1
     

        

if __name__ == "__main__":
    print(Solution().numBusesToDestination([[1, 2, 7], [3, 6, 7]], 1, 6))
    print(Solution().numBusesToDestinationBiBFS([[1, 2, 7], [3, 6, 7]], 1, 6))
    routes = [[0,1,6,16,22,23],[14,15,24,32],[4,10,12,20,24,28,33],
              [1,10,11,19,27,33],[11,23,25,28],[15,20,21,23,29],[29]]
    print(Solution().numBusesToDestination(routes, 4, 21))
    print(Solution().numBusesToDestinationBiBFS(routes, 4, 21))
    routes = [[0,14,22,34,35,56,64,65,82,108,111,116,121,123,131,132,151,152,154,176,180,184,189,198,201,208],[6,23,35,37,38,40,41,49,58,64,74,92,96,101,112,116,123,127,142,148,150,154,155,165,182,193,209],[10,13,21,42,72,73,89,115,121,125,135,136,161,194,205,208],[6,33,34,60,75,79,80,81,87,96,105,110,115,119,122,124,125,133,135,141,142,148,158,186],[3,21,22,30,31,35,56,58,59,74,78,93,97,107,124,127,128,130,141,142,143,146,147,151,166,167,169,175,180,181,185,203],[141,204],[7,19,27,30,31,34,41,48,51,54,55,69,89,91,100,104,110,121,127,134,138,143,150,152,161,170,181,184,185,190,195],[3,8,22,25,38,58,70,74,77,79,80,83,86,88,99,108,109,116,120,132,135,136,137,148,151,153,158,169,171,173,174,175,178,180,202,205,207],[0,10,16,27,41,45,60,62,73,93,102,115,134,140,153,164,168,186,188],[7,12,23,29,32,39,43,59,64,68,70,91,107,120,136,162,165,176,177,183,189,195,203],[11,13,16,28,31,34,39,56,62,89,95,101,102,107,112,115,125,142,145,151,155,170,171,177,197,204,209],[2,5,70,71,83,93,97,100],[9,10,12,20,21,27,34,36,40,55,57,61,67,68,70,73,83,90,92,101,106,108,109,111,116,128,138,141,155,156,168,173,176,186,191,203],[8,10,11,15,18,24,43,46,97,99,137,138,166,192,194,207],[4,5,6,29,42,50,64,78,81,84,107,110,116,137,143,144,146,150,157,178,182,207],[3,7,17,34,36,41,51,53,54,55,63,68,71,82,86,91,96,97,108,117,128,136,137,138,142,145,148,156,164,173,182,188,200,207],[4,13,19,23,33,50,60,69,76,77,78,80,94,97,107,109,116,123,126,128,129,133,137,139,140,143,147,152,158,159,163,164,166,184,187,189,200,206],[7,35,38,42,94,104,116,120,123,134,154],[2,17,21,25,30,38,43,46,48,55,64,84,85,99,102,112,117,126,145,154,161,165,174,176,186],[4,43,46,48,58,67,68,91,126,130,140,150,153,162,170,174],[8,24,65,67,106,118,145,148,202],[6,12,20,23,36,37,39,48,59,66,69,71,80,86,90,102,105,118,126,128,134,140,141,156,160,163,164,188,191,199,205,207],[2,48,115,170],[2,27,49,59,64,67,68,75,77,90,133,174,178,184,188,205],[0,4,68,140,158,183,196,204],[11,20,35,48,60,61,63,73,98,116,120,125,131,132,149,151,171,179,180,182,185,188,204,208],[42,112],[7,11,24,29,41,42,54,57,64,72,78,87,95,103,106,107,108,111,117,122,123,152,164,186,190,195,199,202,208],[2,3,10,11,19,21,24,43,48,49,61,67,68,73,75,80,101,122,123,134,137,141,162,172,182,186,190,202,208],[9,13,31,35,42,66,68,83,88,90,95,97,102,111,134,136,138,142,153,174,200],[4,19,51,52,56,60,65,67,68,82,83,85,93,110,113,125,134,139,152,159,162,194],[19,20,25,28,29,30,40,65,120,125,126,153,155,170,172,184],[12,28,35,36,37,48,53,77,84,85,89,106,117,119,134,138,149,150,161,180,182,189,206],[90],[5,35,38,44,45,46,48,51,52,54,58,62,71,74,77,78,80,90,99,118,126,136,150,152,157,171,185,187,189,209],[9,18,22,25,48,55,56,59,64,66,68,75,77,78,79,98,103,109,110,122,151,154,164,171,175,187,193,205,207],[11,12,19,32,41,50,54,56,57,62,69,70,71,73,79,83,84,94,95,110,130,157,172,173,179,205,208],[0,5,10,15,30,32,36,45,72,93,105,111,114,116,120,127,138,139,154,190,193],[3,5,6,21,33,34,35,41,50,57,60,65,82,90,92,102,111,114,120,131,156,186,195],[116,168,203],[1,4,10,14,18,23,43,51,52,65,71,86,88,92,100,104,108,112,120,131,133,148,152,154,165,169,174,186,189,190,191,198,200,208],[6,16,21,28,31,35,37,38,58,64,71,72,76,94,95,99,100,116,122,126,133,134,136,138,140,144,147,161,163,180,185]]
    print(Solution().numBusesToDestination(routes, 77, 31))
    print(Solution().numBusesToDestinationBiBFS(routes, 77, 31))
    print(Solution().numBusesToDestinationBiBFSOptimized(routes, 77, 31))

    routes = [[98,173],[87,139,178,184],[0,1,2,5,8,17,28,40,42,47,59,71,82,85,105,114,117,118,119,126,130,135,138,142,143,150,152,166,169,176,178,196,201,210,238,239],[0,3,5,12,37,38,39,41,45,50,58,64,65,69,76,89,95,110,118,120,126,128,133,135,143,171,176,179,183,197,200,215,216,217,218,219,227,229,232],[8,23,35,45,52,54,55,66,73,84,95,107,154,156,175,206,207,229,233,236],[4,5,16,24,27,30,50,54,56,67,72,75,77,79,80,89,96,124,137,139,147,157,163,165,167,193,195,198,210,216,221,222,223,227],[2,22,24,29,31,52,107,116,120,136,141,142,159,167,176,187,235],[80,175],[13,23,96,115,122,150,167,170,172,185,187,212,233],[14,21,23,24,25,39,42,46,57,66,77,100,115,116,118,122,126,127,144,145,148,152,155,160,164,165,195,202,209,210,213,220,223,229,231,237],[5,23,30,37,51,56,57,59,72,74,87,105,141,163,166,169,175,183,184,198,210,220,221],[10,35,58,69,109,151,154,187,207,210,222,239],[3,5,20,22,30,34,35,36,42,50,52,61,65,66,67,69,80,86,87,89,93,95,124,127,128,132,136,166,174,183,186,191,195,197,201,207,208,220,221],[25,69,92,102,107,110,118,132,136,160,161,189,202,209,239],[24,37,38,41,42,47,52,57,58,71,82,90,103,107,123,142,143,150,174,177,187,189,196,233],[62,113,115,179,207],[14,60,80,83,93,103,123,133,135,151,163,173,180,235],[2,3,9,23,26,29,32,36,37,46,49,59,74,79,86,94,114,115,132,141,142,161,163,167,171,174,179,180,192,199,201,205,210,218,230,232,236],[10,44,74,120,123,142,183,188],[23,28,33,42,48,61,64,73,74,89,99,105,134,141,143,152,162,164,172,186,205,221,222],[3,8,23,42,50,56,58,66,81,86,103,110,125,133,143,155,156,159,167,171,172,188,189,190,199,221,230],[1,19,24,28,29,32,33,35,45,51,55,61,77,78,79,87,90,96,111,115,119,121,130,133,138,141,164,169,172,178,184,192,198,216,222,234],[192],[38,137],[25,43,50,52,64,74,96,104,109,136,149,194,195,200,237,238],[2,9,12,16,18,40,41,44,86,100,115,122,126,132,139,142,149,161,164,165,169,170,175,195,198,202,214,217,228,230,237],[14,27,34,36,40,66,78,80,88,131,132,135,148,169,177,183,207,223],[4,29,31,38,74,88,107,112,123,142,171,176,205,215,227],[11,32,39,53,59,66,74,80,101,109,113,114,142,151,154,158,172,193,198,221,238,239],[2],[55,74,118,128,170],[10,20,27,35,41,64,72,73,76,97,119,126,140,142,167,187,213],[51,79,109,158,200,215],[6,21,31,33,47,87,89,109,119,126,153,173,179,183,202,211,223,230,237],[3,6,12,14,24,26,46,47,49,78,91,101,114,120,124,125,131,132,150,161,182,189,213,218,224,230,234],[13,18,21,29,34,38,39,48,54,55,58,63,85,90,93,112,162,174,194,198,203,206,210,232],[30,40,52,62,63,68,69,72,77,80,83,85,91,97,104,114,115,123,133,137,147,161,174,177,179,187,190,195,198,215,226,228,232,233],[2,14,15,31,34,35,36,42,46,54,63,66,73,78,107,108,123,126,137,139,140,143,154,164,165,177,179,186,197,200,202,227,230,239],[1,37,82,94,119,125,127,128,146,148,184,188,206,209,212,218,232,236],[8,10,21,26,31,35,36,38,39,41,44,50,55,70,77,84,86,103,117,124,130,133,134,171,172,184,193,194,213,229,230],[0,71,73,89,91,119,130,146,148,152,192,196],[32,33,55,103,141],[11,16,23,52,74,86,100,105,108,120,129,133,170,181,183,187,207,210,227,231],[18,19,38,46,49,51,52,53,70,90,99,117,173,191,201,209,219,223],[2,5,9,12,15,16,17,23,24,33,47,68,70,101,109,119,122,133,134,153,167,171,173,176,179,188,197,204,207,210,216,225,230,237,238],[1,8,10,11,13,22,25,26,27,31,36,37,53,55,57,58,61,75,89,90,100,106,125,158,169,170,172,177,186,199,215,222,226,230,235,237,239],[6,7,8,20,24,30,40,42,51,74,79,81,91,136,167,169,176,179,181,182,197,203,210,215,238,239],[8,12,14,33,37,38,39,44,65,107,116,124,128,132,134,169,178,179,186,193,200,211,213,217,222,224,225]]
    print(Solution().numBusesToDestination(routes, 94, 222))
    print(Solution().numBusesToDestinationBiBFS(routes, 94, 222))
    print(Solution().numBusesToDestinationBiBFSOptimized(routes, 94, 222))
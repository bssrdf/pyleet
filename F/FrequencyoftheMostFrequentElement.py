'''
-Medium-
*Sliding Window*
*Binary Search*


The frequency of an element is the number of times it occurs in an array.

You are given an integer array nums and an integer k. In one operation, 
you can choose an index of nums and increment the element at that 
index by 1.

Return the maximum possible frequency of an element after performing 
at most k operations.

 

Example 1:

Input: nums = [1,2,4], k = 5
Output: 3
Explanation: Increment the first element three times and the second element two times to make nums = [4,4,4].
4 has a frequency of 3.
Example 2:

Input: nums = [1,4,8,13], k = 5
Output: 2
Explanation: There are multiple optimal solutions:
- Increment the first element three times to make nums = [4,4,8,13]. 4 has a frequency of 2.
- Increment the second element four times to make nums = [1,8,8,13]. 8 has a frequency of 2.
- Increment the third element five times to make nums = [1,4,13,13]. 13 has a frequency of 2.
Example 3:

Input: nums = [3,9,6], k = 2
Output: 1
 

Constraints:

1 <= nums.length <= 105
1 <= nums[i] <= 105
1 <= k <= 105

'''

from typing import List
from collections import Counter
import bisect
class Solution:
    def maxFrequency(self, nums: List[int], k: int) -> int:
        count = Counter(nums)
        arr = sorted(count.keys())
        n, ans = len(arr), 0
        # print(n)
        fkak = [0]
        freqSum = [0]
        for i in range(n):
            freqSum.append(freqSum[-1]+count[arr[i]])
            fkak.append(fkak[-1]+arr[i]*count[arr[i]])
        #fkak = fkak[1:]
        #freqSum = freqSum[1:]
        # print(freqSum)
        def binary_search(x, i):
            l, r = 0, i
            res = r
            while l < r:
                mid = l + (r-l)//2
                if x*(freqSum[i]-freqSum[mid])-(fkak[i]-fkak[mid]) <= k:
                    res = mid
                    r = mid 
                else:
                    l = mid + 1
            return res
        for i in range(n):
            idx = binary_search(arr[i], i)
            ans = max(ans, freqSum[i+1] - freqSum[idx])

            print(i, arr[i],  count[arr[i]], idx, freqSum[i+1], freqSum[idx],
                 freqSum[i+1]-freqSum[idx], ans)
        return ans
    
    def maxFrequency2(self, nums: List[int], k: int) -> int:
        # brute force        
        arr = sorted(nums)
        n, ans = len(arr), 0
        # print(n)
        
        for i in range(n):
            l, t = k, 0 
            j = 0
            for j in range(i-1, -1, -1):
                l -= arr[i]-arr[j]
                if l < 0:
                    break
                t += 1
            
            ans = max(ans, t+1)
            # print(i, arr[i], j+1, arr[j+1], count[arr[j+1]], count[arr[i]], ans)
        return ans
    def maxFrequency3(self, nums, k):      
        # Sliding window  
        A = nums
        i = 0
        A.sort()
        for j in range(len(A)):
            k += A[j]
            if k < A[j] * (j - i + 1):
                k -= A[i]
                i += 1
        return j - i + 1
    
    def maxFrequency4(self, nums: List[int], k: int) -> int:
        # Binary Search
        n = len(nums)
        nums.sort()
        preSum = [0] * (n + 1)
        for i in range(n):
            preSum[i + 1] = preSum[i] + nums[i]

        def getSum(left, right):  # left, right inclusive
            return preSum[right + 1] - preSum[left]

        def count(index): # Count frequency of `nums[index]` if we make other elements equal to `nums[index]`
            left = 0
            right = index
            res = index
            while left <= right:
                mid = left + (right - left) // 2
                s = getSum(mid, index - 1) # get sum of (nums[mid], nums[mid+1]...nums[index-1])
                if s + k >= (index - mid) * nums[index]: # Found an answer -> Try to find a better answer in the left side
                    res = mid  # save best answer so far
                    right = mid - 1
                else:
                    left = mid + 1
            return index - res + 1

        ans = 0
        for i in range(n):
            ans = max(ans, count(i))
        return ans






if __name__ == "__main__":
    # print(Solution().maxFrequency(nums = [1,2,4], k = 5))
    # print(Solution().maxFrequency(nums = [1,4,8,13], k = 5))
    # print(Solution().maxFrequency(nums = [3,9,6], k = 2))
    # print(Solution().maxFrequency(nums = [9940,9995,9944,9937,9941,9952,9907,9952,9987,9964,9940,9914,9941,9933,9912,9934,9980,9907,9980,9944,9910,9997],
    # k = 7925))
    # print(Solution().maxFrequency(nums = [9902,9903,9904,9907], k=3))
    # print(Solution().maxFrequency(nums = [9930,9923,9983,9997,9934,9952,9945,9914,9985,9982,9970,9932,9985,9902,9975,9990,9922,9990,9994,9937,9996,9964,9943,9963,9911,9925,9935,9945,9933,9916,9930,9938,10000,9916,9911,9959,9957,9907,9913,9916,9993,9930,9975,9924,9988,9923,9910,9925,9977,9981,9927,9930,9927,9925,9923,9904,9928,9928,9986,9903,9985,9954,9938,9911,9952,9974,9926,9920,9972,9983,9973,9917,9995,9973,9977,9947,9936,9975,9954,9932,9964,9972,9935,9946,9966], 
    # k = 3056))
    # print(Solution().maxFrequency2(nums = [9930,9923,9983,9997,9934,9952,9945,9914,9985,9982,9970,9932,9985,9902,9975,9990,9922,9990,9994,9937,9996,9964,9943,9963,9911,9925,9935,9945,9933,9916,9930,9938,10000,9916,9911,9959,9957,9907,9913,9916,9993,9930,9975,9924,9988,9923,9910,9925,9977,9981,9927,9930,9927,9925,9923,9904,9928,9928,9986,9903,9985,9954,9938,9911,9952,9974,9926,9920,9972,9983,9973,9917,9995,9973,9977,9947,9936,9975,9954,9932,9964,9972,9935,9946,9966], 
    # k = 3056))
    print(Solution().maxFrequency(nums = [9979,9938,9947,9916,9995,9981,9981,9931,9984,9942,9946,9946,9945,9931,9908,9920,9929,9917,9904,9945,9963,9910,9942,9965,9915,9981,9908,9919,9975,9904,9934,9922,9989,9946,9928,9928,9940,9941,9995,9905,9903,9980,9917,9940,9910,9994,9909,9965,9972,9931,9975,9913,9983,9943,9996,9917,9994,9991,9948,9961,9921,9981,9928,9933,9905,9957,9953,9940,9958,9982,9900,9912,9959,9992,9978,9988,9940,9985,9945,9900,9956,9976,9972,9914,9903,9978,9965,9987,9926,9963,9968,9962,9995,9963,9960,9986,9916,9911,9976,9988,9952,9914,9934,9929,9962,9999,9988,9901,9925,9983,9991,9915,9930,9949,9931,9944,9947,9921,9982,9984,9998,9945,9907,9900,9992,9945,9995,9941,9930,9918,9961,9960,9900,9952,9952,9954,9976,9970,9990,9947,9910,9908,9935,9971,9971,10000,9941,9983,9949,9985,9992,9996,9918,9930,9994,9970,9989,9975,9960,9973,9993,9900,9915,9974,9966,9978,9926,9937,9936,9952,9996,9996,9912,9915,9976,9976,9901,9926,9959,9989,9976,9904,9999,9925,9934,9947,9950,9985,9985,9932,9922,9962,9962,9993,9912,9924,9992,9941,9959,9954,9943,9995,9992,9928,9992,9920,9984,9917,9976,9971,9927,9917,9923,9948,9929,9990,9990,9921,9989,9910,9921],
    k = 2636))
    print(Solution().maxFrequency2(nums = [9979,9938,9947,9916,9995,9981,9981,9931,9984,9942,9946,9946,9945,9931,9908,9920,9929,9917,9904,9945,9963,9910,9942,9965,9915,9981,9908,9919,9975,9904,9934,9922,9989,9946,9928,9928,9940,9941,9995,9905,9903,9980,9917,9940,9910,9994,9909,9965,9972,9931,9975,9913,9983,9943,9996,9917,9994,9991,9948,9961,9921,9981,9928,9933,9905,9957,9953,9940,9958,9982,9900,9912,9959,9992,9978,9988,9940,9985,9945,9900,9956,9976,9972,9914,9903,9978,9965,9987,9926,9963,9968,9962,9995,9963,9960,9986,9916,9911,9976,9988,9952,9914,9934,9929,9962,9999,9988,9901,9925,9983,9991,9915,9930,9949,9931,9944,9947,9921,9982,9984,9998,9945,9907,9900,9992,9945,9995,9941,9930,9918,9961,9960,9900,9952,9952,9954,9976,9970,9990,9947,9910,9908,9935,9971,9971,10000,9941,9983,9949,9985,9992,9996,9918,9930,9994,9970,9989,9975,9960,9973,9993,9900,9915,9974,9966,9978,9926,9937,9936,9952,9996,9996,9912,9915,9976,9976,9901,9926,9959,9989,9976,9904,9999,9925,9934,9947,9950,9985,9985,9932,9922,9962,9962,9993,9912,9924,9992,9941,9959,9954,9943,9995,9992,9928,9992,9920,9984,9917,9976,9971,9927,9917,9923,9948,9929,9990,9990,9921,9989,9910,9921],
    k = 2636))
    print(Solution().maxFrequency3(nums = [9979,9938,9947,9916,9995,9981,9981,9931,9984,9942,9946,9946,9945,9931,9908,9920,9929,9917,9904,9945,9963,9910,9942,9965,9915,9981,9908,9919,9975,9904,9934,9922,9989,9946,9928,9928,9940,9941,9995,9905,9903,9980,9917,9940,9910,9994,9909,9965,9972,9931,9975,9913,9983,9943,9996,9917,9994,9991,9948,9961,9921,9981,9928,9933,9905,9957,9953,9940,9958,9982,9900,9912,9959,9992,9978,9988,9940,9985,9945,9900,9956,9976,9972,9914,9903,9978,9965,9987,9926,9963,9968,9962,9995,9963,9960,9986,9916,9911,9976,9988,9952,9914,9934,9929,9962,9999,9988,9901,9925,9983,9991,9915,9930,9949,9931,9944,9947,9921,9982,9984,9998,9945,9907,9900,9992,9945,9995,9941,9930,9918,9961,9960,9900,9952,9952,9954,9976,9970,9990,9947,9910,9908,9935,9971,9971,10000,9941,9983,9949,9985,9992,9996,9918,9930,9994,9970,9989,9975,9960,9973,9993,9900,9915,9974,9966,9978,9926,9937,9936,9952,9996,9996,9912,9915,9976,9976,9901,9926,9959,9989,9976,9904,9999,9925,9934,9947,9950,9985,9985,9932,9922,9962,9962,9993,9912,9924,9992,9941,9959,9954,9943,9995,9992,9928,9992,9920,9984,9917,9976,9971,9927,9917,9923,9948,9929,9990,9990,9921,9989,9910,9921],
    k = 2636))
    print(Solution().maxFrequency4(nums = [9979,9938,9947,9916,9995,9981,9981,9931,9984,9942,9946,9946,9945,9931,9908,9920,9929,9917,9904,9945,9963,9910,9942,9965,9915,9981,9908,9919,9975,9904,9934,9922,9989,9946,9928,9928,9940,9941,9995,9905,9903,9980,9917,9940,9910,9994,9909,9965,9972,9931,9975,9913,9983,9943,9996,9917,9994,9991,9948,9961,9921,9981,9928,9933,9905,9957,9953,9940,9958,9982,9900,9912,9959,9992,9978,9988,9940,9985,9945,9900,9956,9976,9972,9914,9903,9978,9965,9987,9926,9963,9968,9962,9995,9963,9960,9986,9916,9911,9976,9988,9952,9914,9934,9929,9962,9999,9988,9901,9925,9983,9991,9915,9930,9949,9931,9944,9947,9921,9982,9984,9998,9945,9907,9900,9992,9945,9995,9941,9930,9918,9961,9960,9900,9952,9952,9954,9976,9970,9990,9947,9910,9908,9935,9971,9971,10000,9941,9983,9949,9985,9992,9996,9918,9930,9994,9970,9989,9975,9960,9973,9993,9900,9915,9974,9966,9978,9926,9937,9936,9952,9996,9996,9912,9915,9976,9976,9901,9926,9959,9989,9976,9904,9999,9925,9934,9947,9950,9985,9985,9932,9922,9962,9962,9993,9912,9924,9992,9941,9959,9954,9943,9995,9992,9928,9992,9920,9984,9917,9976,9971,9927,9917,9923,9948,9929,9990,9990,9921,9989,9910,9921],
    k = 2636))
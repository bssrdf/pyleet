'''

-Medium-

Given a tree consisting of n nodes, n-1 edges. Output the second diameter of a tree, namely, the second 
largest value of distance between pairs of nodes.

Given an array edge of size (n-1) x 3, and edge[i][0], edge[i][1] and edge[i][2] indicate that the i-th 
undirected edge is from edge[i][0] to edge[i][1] and the length is edge[i][2].

2 <= n <= 10^5

 

1 <= edge[i][2] <= 10^5

 

Using DFS(Depth-First-Search) is easy to cause stack overflow, so please use BFS(Breadth First Search) to 
finish the task.

If there are more than one max distance, you just need to return the max distance

样例
Input:[[0,1,4],[0,2,7]]
Output:7
Explanation: The second largest value of distance is 7 between node 0 and node 2.

'''
from collections import defaultdict, deque

class Solution:
    """
    @param edge: edge[i][0] [1] [2]  start point,end point,value
    @return: return the second diameter length of the tree
    """
    def getSecondDiameter(self, edges):
        # write your code here
        n = len(edges)+1
        graph = defaultdict(set)
        for u,v,w in edges:
            graph[u].add((v,w))
            graph[v].add((u,w))
        firstEndPointIdx, secondEndPointIdx = -1, -1
        distance,  dist2First, dist2Second = [0]*n, [0]*n, [0]*n
        def bfs(src, dist):
            visited = {src}
            q = deque([src])  # Pair of (vertex, distance)
            farthestNode = -1
            while len(q) > 0:
                u = q.popleft()
                for v,w in graph[u]:
                    if v not in visited:
                        visited.add(v)
                        dist[v] = dist[u]+w
                        q.append(v)
            return farthestNode
        def findMaxDistanceIndex(dist):

            # 初始化最大距离和最大距离所在的数组下标
            maxDistance = 0
            index = 0

            # 找出最大距离
            for i in range(n):
                if dist[i] > maxDistance:
                    maxDistance = dist[i]
                    index = i
            return index

        bfs(0, distance)
        firstEndPointIdx = findMaxDistanceIndex(distance)  
        bfs(firstEndPointIdx, dist2First)
        secondEndPointIdx = findMaxDistanceIndex(dist2First)  
        bfs(secondEndPointIdx, dist2Second)
        dist = 0
        for i in range(n):
            if i != firstEndPointIdx and i != secondEndPointIdx:
                dist = max(dist, max(dist2First[i], dist2Second[i]))
        return dist


if __name__ == "__main__":
    print(Solution().getSecondDiameter([[0,1,4],[0,2,7]]))    
    edges = [[0,1,169],[1,2,82],[1,3,470],[0,4,411],[0,5,497],[0,6,475],[6,7,373],[0,8,354],[3,9,416],[4,10,412],[4,11,252],[9,12,446],[7,13,143],[11,14,332],[6,15,365],[0,16,291],[1,17,496],[9,18,392],[18,19,458],[18,20,269],[8,21,252],[17,22,496],[0,23,418],[9,24,342],[5,25,410],[7,26,286],[3,27,430],[22,28,130],[4,29,130],[21,30,129],[3,31,189],[14,32,141],[8,33,155],[29,34,463],[9,35,215],[1,36,45],[21,37,281],[14,38,315],[25,39,151],[6,40,285],[12,41,167],[0,42,268],[5,43,341],[40,44,315],[1,45,159],[26,46,472],[27,47,392],[43,48,439],[11,49,465],[41,50,306],[23,51,69],[25,52,202],[26,53,304],[27,54,205],[13,55,279],[5,56,156],[19,57,465],[10,58,386],[43,59,33],[36,60,210],[28,61,58],[19,62,106],[20,63,19],[62,64,53],[48,65,392],[45,66,270],[50,67,252],[62,68,461],[20,69,418],[20,70,113],[48,71,413],[15,72,486],[40,73,295],[37,74,77],[36,75,117],[16,76,46],[13,77,67],[37,78,414],[76,79,408],[49,80,374],[72,81,187],[60,82,110],[28,83,293],[27,84,101],[29,85,5],[58,86,396],[85,87,195],[68,88,64],[20,89,329],[73,90,453],[82,91,39],[60,92,349],[48,93,143],[90,94,153],[3,95,268],[10,96,86],[17,97,479],[51,98,27],[14,99,86],[45,100,87],[82,101,130],[53,102,245],[48,103,364],[60,104,166],[11,105,492],[3,106,497],[43,107,378],[30,108,396],[56,109,224],[42,110,59],[35,111,140],[34,112,131],[51,113,182],[50,114,57],[22,115,325],[52,116,14],[31,117,74],[59,118,333],[79,119,492],[78,120,395],[100,121,386],[23,122,102],[103,123,242],[25,124,225],[58,125,164],[64,126,167],[74,127,162],[81,128,471],[0,129,357],[43,130,179],[75,131,68],[104,132,431],[89,133,63],[79,134,435],[31,135,251],[107,136,111],[96,137,100],[41,138,31],[11,139,107],[48,140,200],[25,141,101],[110,142,494],[67,143,4],[63,144,94],[103,145,352],[18,146,245],[77,147,209],[25,148,177],[136,149,79],[137,150,468],[147,151,145],[4,152,431],[126,153,134],[144,154,493],[12,155,14],[48,156,136],[25,157,53],[54,158,159],[57,159,237],[19,160,281],[46,161,392],[144,162,284],[33,163,202],[54,164,118],[50,165,244],[20,166,24],[106,167,11],[134,168,263],[167,169,9],[150,170,336],[161,171,369],[37,172,446],[41,173,54],[95,174,423],[141,175,460],[86,176,67],[33,177,219],[78,178,428],[0,179,105],[81,180,407],[79,181,204],[22,182,66],[162,183,15],[100,184,270],[178,185,423],[137,186,11],[12,187,145],[114,188,262],[119,189,322],[31,190,221],[104,191,179],[17,192,13],[52,193,26],[116,194,253],[51,195,73],[88,196,190],[85,197,50],[101,198,235],[144,199,158],[77,200,177],[111,201,294],[92,202,182],[193,203,378],[29,204,7],[23,205,56],[6,206,398],[164,207,425],[202,208,203],[152,209,454],[164,210,205],[79,211,94],[184,212,403],[132,213,54],[150,214,42],[102,215,41],[48,216,196],[131,217,252],[3,218,351],[166,219,9],[92,220,129],[89,221,404],[211,222,402],[120,223,330],[105,224,244],[101,225,358],[24,226,411],[156,227,452],[184,228,5],[82,229,471],[117,230,176],[109,231,362],[206,232,62],[202,233,147],[53,234,459],[62,235,468],[168,236,101],[232,237,230],[4,238,124],[91,239,394],[216,240,269],[191,241,77],[39,242,97],[228,243,67],[54,244,481],[221,245,43],[226,246,196],[118,247,119],[239,248,303],[115,249,6],[84,250,93],[25,251,129],[157,252,419],[200,253,346],[144,254,329],[197,255,377],[189,256,433],[223,257,365],[65,258,167],[80,259,423],[8,260,339],[210,261,421],[202,262,71],[173,263,406],[131,264,472],[162,265,108],[60,266,206],[73,267,354],[119,268,102],[104,269,48],[209,270,188],[144,271,479],[66,272,185],[245,273,225],[172,274,434],[97,275,336],[267,276,110],[231,277,9],[97,278,177],[74,279,421],[122,280,109],[211,281,415],[188,282,201],[65,283,145],[178,284,427],[136,285,80],[89,286,246],[7,287,124],[269,288,460],[256,289,109],[27,290,350],[242,291,490],[251,292,350],[171,293,160],[37,294,29],[85,295,190],[251,296,81],[88,297,370],[168,298,312],[25,299,333],[181,300,229],[270,301,366],[275,302,490],[105,303,176],[198,304,219],[20,305,185],[234,306,238],[3,307,97],[152,308,372],[111,309,172],[135,310,283],[206,311,75],[103,312,477],[65,313,365],[107,314,255],[149,315,349],[69,316,333],[225,317,350],[213,318,49],[205,319,28],[23,320,250],[273,321,69],[238,322,367],[312,323,6],[242,324,280],[295,325,62],[196,326,4],[151,327,267],[150,328,212],[71,329,8],[327,330,315],[205,331,155],[270,332,87],[12,333,156],[127,334,387],[190,335,402],[311,336,292],[9,337,361],[325,338,377],[7,339,127],[272,340,201],[71,341,62],[254,342,164],[176,343,58],[16,344,423],[177,345,87],[344,346,220],[179,347,346],[176,348,166],[236,349,125],[310,350,215],[135,351,391],[221,352,414],[297,353,341],[305,354,47],[191,355,473],[23,356,288],[216,357,389],[51,358,375],[145,359,36],[205,360,37],[263,361,178],[173,362,337],[245,363,118],[47,364,430],[125,365,43],[105,366,81],[129,367,384],[66,368,171],[100,369,273],[277,370,65],[190,371,121],[327,372,449],[51,373,169],[65,374,387],[28,375,193],[148,376,44],[359,377,465],[208,378,175],[138,379,195],[50,380,104],[354,381,416],[40,382,174],[334,383,403],[94,384,180],[164,385,137],[29,386,28],[113,387,245],[340,388,383],[341,389,284],[148,390,95],[266,391,49],[143,392,149],[154,393,189],[33,394,149],[202,395,437],[258,396,364],[390,397,230],[219,398,358],[214,399,2],[360,400,276],[196,401,93],[222,402,440],[32,403,355],[222,404,46],[66,405,292],[142,406,333],[252,407,224],[44,408,354],[334,409,232],[301,410,84],[59,411,36],[388,412,445],[166,413,423],[128,414,136],[93,415,368],[250,416,124],[270,417,286],[414,418,408],[155,419,290],[396,420,187],[90,421,239],[95,422,41],[336,423,170],[324,424,451],[324,425,499],[372,426,176],[84,427,212],[321,428,108],[21,429,341],[31,430,421],[42,431,20],[410,432,376],[363,433,306],[219,434,485],[299,435,257],[24,436,78],[174,437,383],[424,438,301],[242,439,475],[327,440,487],[78,441,271],[326,442,296],[281,443,358],[196,444,369],[364,445,390],[245,446,265],[217,447,8],[209,448,475],[340,449,499],[266,450,94],[76,451,262],[312,452,246],[211,453,434],[394,454,402],[382,455,488],[180,456,35],[312,457,382],[378,458,188],[18,459,124],[172,460,35],[6,461,349],[127,462,359],[120,463,51],[7,464,389],[440,465,351],[243,466,68],[301,467,408],[329,468,244],[40,469,279],[236,470,475],[197,471,191],[460,472,190],[330,473,82],[264,474,6],[466,475,67],[428,476,170],[214,477,18],[93,478,303],[273,479,129],[324,480,75],[332,481,372],[407,482,378],[297,483,131],[142,484,415],[96,485,326],[464,486,321],[95,487,134],[192,488,73],[115,489,298],[323,490,307],[68,491,272],[117,492,363],[174,493,377],[475,494,106],[257,495,358],[160,496,317],[215,497,248],[366,498,173],[319,499,199]]
    print(Solution().getSecondDiameter(edges))    

